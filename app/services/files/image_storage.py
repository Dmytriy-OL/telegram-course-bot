from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.exc import IntegrityError
from app.database.core.models import Image, SessionLocal
import asyncio
import os
import shutil  # –î–æ–¥–∞—î–º–æ shutil –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
from app.database.admin_crud import download_image,delete_image
from app.images import BASE_DIR


async def save_image_to_disk_and_db(file_bytes, title: str, main_image: bool = False):
    BASE_DIR.mkdir(parents=True, exist_ok=True)
    file_path = BASE_DIR / f"{title}.jpg"

    with open(file_path, "wb") as f:
        f.write(file_bytes.read())

    await download_image(title, main_image)


async def delete_image_to_disk_and_db(filename: str):
    file_path = BASE_DIR / f"{filename}.jpg"

    if file_path.exists():
        os.remove(file_path)

    await delete_image(filename)


async def add_image(session: AsyncSession, filename: str, mimetype: str):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —É 2 –∑–∞–ø–∏—Å–∏"""

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ
    result = await session.execute(select(Image))
    images = result.scalars().all()

    if len(images) >= 2:
        print("‚ùå –ù–µ–º–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 2 –∑–æ–±—Ä–∞–∂–µ–Ω—å!")
        return None  # –ù–µ –¥–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    # –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å –º–µ–Ω—à–µ –¥–≤–æ—Ö ‚Äî –¥–æ–¥–∞—î–º–æ
    new_image = Image(filename=filename, mimetype=mimetype)
    session.add(new_image)
    await session.commit()
    print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è '{filename}' –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    return new_image


async def upload_image(filename: str, mimetype: str) -> int | None:
    async with SessionLocal() as session:
        try:
            image = Image(filename=filename, mimetype=mimetype)
            session.add(image)
            await session.commit()
            return image.id
        except IntegrityError:
            await session.rollback()
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª —É–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
            return None


async def get_image(image_id: int) -> Image | None:
    async with SessionLocal() as session:
        result = await session.execute(select(Image).where(Image.id == image_id))
        image = result.scalar_one_or_none()
        if image:
            print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ: {image.filename}")
        else:
            print("‚ùå –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ")
        return image


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å.
    """
    image_dir = "../images"  # –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è, –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤–∏—Ö—ñ–¥–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    upload_dir = "../image_uploads"  # –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–æ–ø—ñ–π
    image_filename = "Courges.jpg"  # –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É

    image_path = os.path.join(image_dir, image_filename)  # –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É

    # üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª {image_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    # üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    image_id = await upload_image(image_filename, "image/jpeg")

    if image_id:
        print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ ID: {image_id}")
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        return

    # üîπ –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ ID
    image = await get_image(image_id)

    if image:
        output_path = os.path.join(upload_dir, image.filename)  # –ö—É–¥–∏ –∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ñ–∞–π–ª

        # üîπ –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª –≤ –Ω–æ–≤–µ –º—ñ—Å—Ü–µ
        shutil.copy(image_path, output_path)
        print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ {output_path}")
    else:
        print("‚ùå –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –¥–∞–Ω—ñ –ø–æ—Ä–æ–∂–Ω—ñ")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError:
        print("‚ö† –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ asyncio.run() –≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ–º—É event loop.")