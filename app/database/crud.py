import asyncio
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload

from app.database.models import SessionLocal, User, Image, Caption, Lesson, LessonType, Enrollment
from aiogram.fsm.context import FSMContext
from sqlalchemy.sql.expression import or_, and_
# from app.image_uploads import BASE_DIR
from app.images import BASE_DIR
from datetime import datetime
import os


async def delete_image_from_db(filename: str = None, id_img: int = None):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    if isinstance(filename, int) and id_img is None:
        id_img = filename
        filename = None

    async with SessionLocal() as session:
        if filename is None and id_img is None:
            return False, "‚ùå –¢—Ä–µ–±–∞ –≤–∫–∞–∑–∞—Ç–∏ –∞–±–æ filename, –∞–±–æ id_img!"

        result = await session.execute(
            select(Image).where(or_(Image.filename == filename, Image.id == id_img))
        )
        image = result.scalar_one_or_none()

        if image:
            file_path = os.path.join(BASE_DIR, image.filename)

            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –∑ –ë–î
            await session.delete(image)
            await session.commit()

            # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
            if os.path.exists(file_path):
                os.remove(file_path)
                return True, f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {image.filename} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ —Ç–∞ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏!"
            else:
                return True, f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {image.filename} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏, –∞–ª–µ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        else:
            return False, " –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"


async def get_images_with_main(filename: str = None):
    """–§—É–Ω—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º –Ω–∞ –∑–∞—Å—Ç–∞–≤—Ü—ñ"""
    async with SessionLocal() as session:
        if filename:
            result = await session.execute(select(Image).where(Image.filename == filename))
            image = result.scalar_one_or_none()
            if image:
                print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {image.filename} –∑–Ω–∞–π–¥–µ–Ω–æ!")
                return [image], None
            else:
                print("‚ùå –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ, –≤–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è.")
                return [], None
        else:
            result = await session.execute(select(Image))
            images = result.scalars().all()
            if images:
                for img in images:
                    print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {img.filename} –∑–Ω–∞–π–¥–µ–Ω–æ!")
                print(f"‚òëÔ∏è –û—Å—Ç–∞–Ω–Ω—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {img.filename}")
                return images, img
            else:
                print("‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
                return [], None


async def main_view():
    """–§—É–Ω—Ü—ñ—è —è–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –±–æ—Ç—É"""
    async with SessionLocal() as session:
        result = await session.execute(select(Image).order_by(Image.id.desc()).limit(1))
        last_image = result.scalar_one_or_none()
        if last_image:
            return last_image


async def view_user(name: str = None):
    """–§—É–Ω—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    async with SessionLocal() as session:
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        result = await session.execute(select(User))
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—è–∫—â–æ –≤—ñ–Ω —î)
        users = result.scalars().all()
        if users:
            for user in users:
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.name}")  # –í–∏–≤–æ–¥–∏–º–æ —ñ–º'—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            return users  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        else:
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            return None  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π


async def add_user(name: str = "–î—ñ–º–∞—Å", surname: str = '–û–ª—ñ–π–Ω–∏–∫', login: str = "ddiii") -> int | None:
    """–§—É–Ω—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–¥"""
    async with SessionLocal() as session:
        user = User(name=name, surname=surname, login=login)
        session.add(user)
        await session.commit()
        await session.refresh(user)
        return user.id


async def create_lesson(title: str, teacher: str, year: int, month: int, day: int, hour: int, minute: int,
                        type_lesson: LessonType,
                        places: int, freely: bool = True):
    async with SessionLocal() as session:
        lesson_datetime = datetime(year, month, day, hour, minute)
        lesson = Lesson(
            title=title,
            instructor=teacher,
            datetime=lesson_datetime,
            type_lesson=type_lesson,
            freely=freely,
            places=places
        )
        session.add(lesson)
        await session.commit()  # –§—ñ–∫—Å—É—î–º–æ –∑–º—ñ–Ω–∏ –≤ –±–∞–∑—ñ
        print("üìå –ó–∞–Ω—è—Ç—Ç—è –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É!")
        await session.refresh(lesson)  # –û–Ω–æ–≤–ª—é—î–º–æ –æ–±'—î–∫—Ç –∑ –ë–î
        return lesson  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç


async def view_lesson():
    async with SessionLocal() as session:
        result = await session.execute(select(Lesson))
        all_lessons = result.scalars().all()

        print("üìö –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—å:")
        if all_lessons:
            for lesson in all_lessons:
                print(
                    f"üîπ –ù–∞–∑–≤–∞: {lesson.title},–ö—ñ–ª—å—ñ—Å—Ç—å –º—ñ—Å—Ç—å: {str(lesson.places)}")
        else:
            print("–ó–∞–Ω–Ω—è—Ç—å –Ω–µ–º–∞—î")


async def find_activities_by_date(year: int, month: int, day: int):
    async with SessionLocal() as session:
        start_date = datetime(year, month, day, 0, 0, 0)
        end_date = datetime(year, month, day, 23, 59, 59)
        print(f"–®—É–∫–∞—î–º–æ –∑–∞–Ω—è—Ç—Ç—è –≤—ñ–¥ {start_date} –¥–æ {end_date}")
        result = await session.execute(
            select(Lesson).where(and_(Lesson.datetime >= start_date, Lesson.datetime <= end_date)))
        lessons = result.scalars().all()
        if lessons:
            for lesson in lessons:
                lesson.type_lesson = "–û–Ω–ª–∞–π–Ω" if lesson.type_lesson == LessonType.ONLINE else "–û—Ñ–ª–∞–π–Ω"
                print(f"–ó–∞–Ω—è—Ç—Ç—è: {lesson.title}\n–ß–∞—Å: {lesson.datetime}\n–¢–∏–ø: {lesson.type_lesson}")
            return lessons
        else:
            print("–ó–∞–Ω—è—Ç—Ç—è –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—ñ")
            return []


async def set_user(tg_id: int, login: str, number: str, name: str = None, surname: str = None):
    async with SessionLocal() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))

        if not user:
            user = User(tg_id=tg_id, name=name, surname=surname, login=login, number=number)
            session.add(user)
        else:
            if name is None or surname is None:
                user.login = login
                user.number = number
            else:
                user.name = name
                user.surname = surname
                user.login = login
                user.number = number

        await session.commit()
        await session.refresh(user)
        return user


async def lesson_records_display(tg_id: int):
    async with SessionLocal() as session:
        result = await session.execute(
            select(Enrollment).where(Enrollment.user_id == tg_id).options(joinedload(Enrollment.lesson),
                                                                          joinedload(Enrollment.user))
        )
        records = result.scalars().all()

        if records:
            for entry in records:
                lesson = entry.lesson  # –î–æ—Å—Ç—É–ø –¥–æ –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–Ω—è—Ç—Ç—è
                user = entry.user
                print(f"–ó–∞–ø–∏—Å: {lesson.title}\n–î–∞—Ç–∞: {lesson.datetime}–∑–∞–ø–∏—Å–∞–Ω–∏–π {user.name} {user.surname}")
        else:
            print("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤")
        return records


async def enroll_student_to_lesson(lesson_id: int, user_tg_id: int):
    async with SessionLocal() as session:
        enrollment = Enrollment(user_id=user_tg_id, lesson_id=lesson_id)
        result = await session.execute(select(Lesson).where(Lesson.id == lesson_id))
        lesson = result.scalar_one_or_none()
        if lesson:
            if lesson.places > 0:
                lesson.places -= 1
                if lesson.places == 0:
                    lesson.freely = False
            else:

                return "–ú—ñ—Å—Ü—è –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ."
        session.add(enrollment)

        await session.commit()
        # await session.refresh(lesson)
        # return "–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –∑–¥—ñ–π—Å–Ω–µ–Ω–∏–π!"


async def cancel_record_db(lesson_id: int):
    async with SessionLocal() as session:
        result = await session.execute(
            select(Enrollment).where(Enrollment.id == lesson_id).options(joinedload(Enrollment.lesson))
        )
        record = result.scalars().first()
        if record:
            lesson = record.lesson
            print(f"–ó–∞–ø–∏—Å {lesson.title},—Å–∫–∞—Å–æ–≤–æ–Ω–æ")
            lesson.places += 1
            await session.delete(record)
            if not lesson.freely:
                lesson.freely = True

            await session.commit()
            return record
        else:
            print("–ó–∞–ø–∏—Å –Ω–µ–Ω–∞–π–¥–µ–Ω–æ")
        return None



async def main():
    # await create_lesson("–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤", "–û–ª–µ–∫—Å—ñ—ó–≤–Ω–∞ –ê.–í", 2025, 3, 23, 18, 30, LessonType.ONLINE, True, )
    await create_lesson("–î–æ—Ä–æ—Å–ª—ñ", "–û–ª–µ–∫—Å—ñ—ó–≤–Ω–∞ –ê.–í", 2025, 5, 15, 18, 30, LessonType.ONLINE, 1, True)

    print("___________________")
    await view_lesson()

    # await add_caption("–ß–æ–ª–æ–≤—ñ—á—ñ –∫—É—Ä—Å–∏", "‚úÖ - –ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏.", True)
    # await delete_captions("–î–∏—Ç—è—á—ñ –∫—É—Ä—Å–∏")
    # await get_all_captions()
    # await main_captions_switch("–ß–æ–ª–æ–≤—ñ—á—ñ –∫—É—Ä—Å–∏")
    # await get_all_captions()


if __name__ == '__main__':
    pass
    # print("\033[93m‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\033[0m")
    # print("\033[91m–ü–æ–º–∏–ª–∫–∞!\033[0m")
    # print("\033[92m‚úÖ –£—Å–ø—ñ—Ö!\033[0m")
    # asyncio.run(cancel_record(1))
    # asyncio.run(lesson_records_display(974638427))
    # asyncio.run(find_activities_by_date(2025, 3, 23))
    # asyncio.run(main())
    # asyncio.run(view_image("Courges.jpg"))
    # asyncio.run(add_user())
    # asyncio.run(main())
    # asyncio.run((view_user()))
    # asyncio.run(view_image()
