from aiogram import F, Router
from aiogram.types import CallbackQuery

from app.database.crud.lessons import find_activities_by_date
from app.bot.keyboards.students import get_lesson_day_actions_keyboard, back_button_markup
from app.bot.keyboards.generators import generate_week_keyboard

router = Router()


@router.callback_query(F.data.startswith("select_day_"))
async def select_day(callback: CallbackQuery):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–Ω—è—Ç—Ç—è"""
    days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]

    _, _, day_index, day, month, year = callback.data.split("_")
    day_index = int(day_index)
    selected_day = days[day_index]

    lessons = await find_activities_by_date(int(year), int(month), int(day))

    if lessons:
        for lesson in lessons:
            teacher = lesson.administrator
            teacher_fullname = f"{teacher.name} {teacher.surname}" if teacher else "–ù–µ–≤—ñ–¥–æ–º–æ"
            lesson_text = (
                f"üìÖ *–í–∏ –≤–∏–±—Ä–∞–ª–∏:* *{selected_day}, {day}.{month}.{year}*\n\n"
                f"üìñ *{lesson.title}*\n"
                f"üïí *–ß–∞—Å:* {lesson.datetime.strftime('%H:%M')}\n"
                f"üìå *–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è:* {lesson.type_lesson}\n"
                f"üë§ *–í–∏–∫–ª–∞–¥–∞—á:* {teacher_fullname}\n"
                f"üé´ *–î–æ—Å—Ç—É–ø–Ω–æ –º—ñ—Å—Ü—å:* {lesson.places}\n\n"
            )

            # –Ø–∫—â–æ –º—ñ—Å—Ü—è –Ω–µ–º–∞—î
            if not lesson.freely:
                lesson_text += (
                    'üî¥ *–ú—ñ—Å—Ü—è –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ.–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è, '
                    '–ø–æ–∫–∏ —Ö—Ç–æ—Å—å –≤—ñ–¥–º–æ–≤–∏—Ç—å—Å—è –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–¥–∞—Å—Ç—å –º—ñ—Å—Ü–µ.* '
                    'üßê\n_–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!_ üîî'
                )
                await callback.message.answer(lesson_text, parse_mode="Markdown", reply_markup=back_button_markup())
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è

            await callback.message.answer(lesson_text, parse_mode="Markdown",
                                          reply_markup=get_lesson_day_actions_keyboard(lesson.id, lesson.places))
    else:
        await callback.message.answer("‚ùå *–ó–∞–Ω—è—Ç—å –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –Ω–µ–º–∞—î –∞–±–æ —ó—Ö —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏.*", parse_mode="Markdown",
                                      reply_markup=back_button_markup())


@router.callback_query(F.data == "select_this_week")
async def select_this_week(callback: CallbackQuery):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è."""
    await callback.message.answer("üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=generate_week_keyboard())


@router.callback_query(F.data == "select_next_week")
async def select_next_week(callback: CallbackQuery):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–∂–Ω—è."""
    await callback.message.answer("üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=generate_week_keyboard(offset=7))
