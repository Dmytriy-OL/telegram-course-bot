from datetime import datetime

from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, \
    CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from app.bot.handlers.utils import delete_lesson_messages
from app.database.crud.bot.lessons import edit_lesson, remove_lesson
from app.database.core.models import LessonType
from app.bot.keyboards.teachers import return_teacher_menu, teacher_main_menu, remove_lesson_by_id

router = Router()


class EditLesson(StatesGroup):
    waiting_for_edit_title = State()
    waiting_for_edit_date = State()
    waiting_for_edit_time = State()
    waiting_for_edit_places = State()
    waiting_for_edit_type = State()
    waiting_for_delete_lesson = State()


@router.callback_query(F.data.startswith("edit_title:"))
async def edit_title(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.split(":")[1])

    await state.update_data(lesson_id=lesson_id)
    await callback.message.answer(
        "üìù *–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –∑–∞–Ω—è—Ç—Ç—è:*\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.",
        parse_mode="Markdown"
    )
    await state.set_state(EditLesson.waiting_for_edit_title)


@router.message(EditLesson.waiting_for_edit_title)
async def get_lesson_title(message: Message, state: FSMContext):
    title = message.text.strip()
    data = await state.get_data()
    lesson_id = data.get("lesson_id")

    if lesson_id is None:
        await message.answer("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
        await state.clear()
        return

    if title:
        await edit_lesson(lesson_id, title=title)
        await message.answer("‚úÖ –ù–∞–∑–≤—É –∑–∞–Ω—è—Ç—Ç—è –∑–º—ñ–Ω–µ–Ω–æ.",
                             parse_mode="Markdown",
                             reply_markup=return_teacher_menu())
    else:
        await message.answer("‚ùóÔ∏è–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –∑–∞–Ω—è—Ç—Ç—è.",
                             parse_mode="Markdown",
                             reply_markup=return_teacher_menu())
    await state.clear()


@router.callback_query(F.data.startswith("edit_date:"))
async def edit_date(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.split(":")[1])
    await state.update_data(lesson_id=lesson_id)
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: `–†–†–†–†.–ú–ú.–î–î`\n"
        "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥:_ `2025.06.12`",
        parse_mode="Markdown"
    )
    await state.set_state(EditLesson.waiting_for_edit_date)


@router.message(EditLesson.waiting_for_edit_date)
async def get_edit_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text.strip(), "%Y.%m.%d")
        current_year = datetime.now().year

        data = await state.get_data()
        lesson_id = data.get("lesson_id")

        if lesson_id is None:
            await message.answer("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            await state.clear()
            return

        valid_year = current_year <= date.year <= current_year + 1
        if not valid_year:
            raise ValueError("–†—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–º –∞–±–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–º")

        await edit_lesson(lesson_id, new_date=date)
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ –∑–º—ñ–Ω—è–Ω–∞: {date.strftime('%d.%m.%Y')}",
            parse_mode="Markdown",
            reply_markup=return_teacher_menu())
        await state.clear()

    except ValueError:
        await message.answer("‚ùóÔ∏è–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É –∑–∞–Ω—è—Ç—Ç—è.",
                             parse_mode="Markdown",
                             reply_markup=return_teacher_menu())


@router.callback_query(F.data.startswith("edit_time:"))
async def edit_time(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.split(":")[1])

    await state.update_data(lesson_id=lesson_id)
    await callback.message.answer(
        "üïí *–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å –∑–∞–Ω—è—Ç—Ç—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 18:00):*\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.",
        parse_mode="Markdown"
    )
    await state.set_state(EditLesson.waiting_for_edit_time)


@router.message(EditLesson.waiting_for_edit_time)
async def get_edit_time(message: Message, state: FSMContext):
    try:
        new_time = datetime.strptime(message.text.strip(), "%H:%M").time()

        data = await state.get_data()
        lesson_id = data.get("lesson_id")

        if lesson_id is None:
            await message.answer("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            await state.clear()
            return

        await edit_lesson(lesson_id, new_time=new_time)
        await message.answer(
            f"üïí –ß–∞—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ : {new_time.strftime('%H:%M')}",
            parse_mode="Markdown",
            reply_markup=return_teacher_menu())
        await state.clear()

    except ValueError:
        await message.answer("‚ùóÔ∏è–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å.",
                             parse_mode="Markdown",
                             reply_markup=return_teacher_menu())


@router.callback_query(F.data.startswith("edit_places:"))
async def edit_places(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.split(":")[1])

    await state.update_data(lesson_id=lesson_id)
    await callback.message.answer(
        "üë•  *–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å:*\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.",
        parse_mode="Markdown"
    )
    await state.set_state(EditLesson.waiting_for_edit_places)


@router.message(EditLesson.waiting_for_edit_places)
async def get_edit_places(message: Message, state: FSMContext):
    try:
        places = int(message.text.strip())

        if places <= 0:
            raise ValueError("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è")

        data = await state.get_data()
        lesson_id = data.get("lesson_id")

        if lesson_id is None:
            await message.answer("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            await state.clear()
            return

        await edit_lesson(lesson_id, places=places)
        await message.answer(
            f"‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑–º—ñ–Ω–Ω–µ–Ω–æ : {places}",
            parse_mode="Markdown",
            reply_markup=return_teacher_menu())
        await state.clear()

    except ValueError:
        await message.answer("‚ùóÔ∏è–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å (–¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ).",
                             parse_mode="Markdown",
                             reply_markup=return_teacher_menu())


@router.callback_query(F.data.startswith("edit_type:"))
async def edit_type(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.split(":")[1])

    await state.update_data(lesson_id=lesson_id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üñ• –û–Ω–ª–∞–π–Ω"), KeyboardButton(text="üè´ –û—Ñ–ª–∞–π–Ω")]
        ],
        resize_keyboard=True,
    )
    await callback.message.answer(
        "üìå *–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–Ω—è—Ç—Ç—è:*\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await state.set_state(EditLesson.waiting_for_edit_type)


@router.message(EditLesson.waiting_for_edit_type)
async def get_edit_type(message: Message, state: FSMContext):
    try:
        type_text = message.text.strip().lower()
        if "–æ–Ω–ª–∞–π–Ω" in type_text:
            lesson_type = LessonType.ONLINE
        elif "–æ—Ñ–ª–∞–π–Ω" in type_text:
            lesson_type = LessonType.OFFLINE
        else:
            await message.answer("‚ö† –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –í–∏–±–µ—Ä—ñ—Ç—å \n'üñ• –û–Ω–ª–∞–π–Ω' –∞–±–æ 'üè´ –û—Ñ–ª–∞–π–Ω'.", )
            return

        data = await state.get_data()
        lesson_id = data.get("lesson_id")

        if lesson_id is None:
            await message.answer("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            await state.clear()
            return

        await edit_lesson(lesson_id, type_lesson=lesson_type)

        display_type = "üñ• –û–Ω–ª–∞–π–Ω" if lesson_type == LessonType.ONLINE else "üè´ –û—Ñ–ª–∞–π–Ω"
        await message.answer(
            f"‚úÖ –¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è –∑–º—ñ–Ω–µ–Ω–æ: {display_type}",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        await message.answer(
            "üìã –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:",
            reply_markup=return_teacher_menu()
        )
        await state.clear()

    except ValueError:
        await message.answer("‚ùóÔ∏è–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å (–¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ).",
                             parse_mode="Markdown",
                             reply_markup=return_teacher_menu())


@router.callback_query(F.data.startswith("remove_lesson:"))
async def edit_remove_lesson(callback: CallbackQuery):
    lesson_id = int(callback.data.split(":")[1])
    await callback.message.answer(
        "üìå *–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ,—â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è:*\n",
        parse_mode="Markdown",
        reply_markup=remove_lesson_by_id(lesson_id)
    )


@router.callback_query(F.data.startswith("delete_lesson:"))
async def delete_lesson(callback: CallbackQuery):
    lesson_id = int(callback.data.split(":")[1])
    deleted = await remove_lesson(lesson_id)
    if deleted:
        await callback.message.answer(
            "‚úÖ –ó–∞–Ω—è—Ç—Ç—è –≤–¥–∞–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ",
            parse_mode="Markdown",
            reply_markup=return_teacher_menu()
        )
    else:
        await callback.message.answer(
            "‚ùóÔ∏è–¶–µ –∑–∞–Ω—è—Ç—Ç—è –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î.",
            parse_mode="Markdown",
            reply_markup=return_teacher_menu()
        )


@router.callback_query(F.data == "delete_lesson_messages")
async def handle_delete_lesson_messages(callback: CallbackQuery, state: FSMContext):
    """–í–∏–¥–∞–ª—è—î —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    await delete_lesson_messages(callback, state)


@router.callback_query(F.data == "teacher_menu_clean")
async def teacher_back_and_delete(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    await delete_lesson_messages(callback, state)

    await callback.message.answer(
        "üìã –ú–µ–Ω—é –≤–∏–∫–ª–∞–¥–∞—á–∞:",
        reply_markup=teacher_main_menu()
    )
