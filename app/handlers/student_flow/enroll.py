from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.database.crud.lessons import enroll_student_to_lesson
from app.database.crud.users import set_user
from app.handlers.utils import delete_previous_message
from app.keyboards.students import get_successful_enrollment_keyboard, get_cancel_operation_keyboard

router = Router()


class Form(StatesGroup):
    waiting_full_name = State()
    waiting_confirmation = State()


@router.callback_query(F.data.startswith("recording_day_"))
async def select_day(callback: CallbackQuery, state: FSMContext):
    _, _, lesson_id, lesson_users = callback.data.split("_")
    lesson_id = int(lesson_id)
    number_of_students = int(lesson_users)
    if number_of_students >= 1:
        await state.update_data(lesson_id=lesson_id)
        text_example = (
            f"üìù*–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º—è:*\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥:–û–ª—ñ–π–Ω–∏–∫ –î–º–∏—Ç—Ä—ñ–π\n"
        )
        await callback.message.answer(text_example, parse_mode="Markdown")
        await state.set_state(Form.waiting_full_name)
    else:
        await callback.message.answer("–ó–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –Ω–µ–º–∞—î –º—ñ—Å—Ç—å:", callback_data=remove_prev_message)


@router.message(Form.waiting_full_name)
async def process_first_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if " " in full_name:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø—Ä–æ–±—ñ–ª –º—ñ–∂ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º'—è–º
        last_name, first_name = full_name.split(" ", 1)
        text_result = (
            f"üìù <b>–ó–∞–ø–∏—Å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è:</b>\n"
            f"üë§ –£—á–µ–Ω—å: {last_name} {first_name}\n\n"
            f"‚úÖ –Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /OK\n"
            f"üîÑ –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /again\n"
            f"‚ùå –©–æ–± <b>—Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å</b>, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel_operation\n"
        )
        await message.answer(text_result, parse_mode="HTML")

        await state.update_data(first_name=first_name, last_name=last_name, full_name=full_name)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
        await state.set_state(Form.waiting_confirmation)
    else:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.")


@router.message(Form.waiting_confirmation, F.text.lower() == "/again")
async def restart_registration(message: Message, state: FSMContext):
    await message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è —â–µ —Ä–∞–∑:")
    await state.set_state(Form.waiting_full_name)


@router.message(Form.waiting_confirmation, F.text.lower() == "/ok")
async def confirm_registration(message: Message, state: FSMContext):
    user_data = await state.get_data()
    first_name = user_data.get("first_name")
    last_name = user_data.get("last_name")
    lesson_id = user_data.get("lesson_id")
    full_name = user_data.get("full_name")

    if not first_name or not last_name:  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –Ω–∞—Ç–∏—Å–Ω–µ –Ω–µ –≤ —Å—Ç–∞–Ω—ñ
        await message.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–∞–ø–∏—Å—É.")
        return

    await set_user(message.from_user.id, message.from_user.username, first_name, last_name)
    await enroll_student_to_lesson(lesson_id, message.from_user.id, full_name)
    await message.answer(f"‚úÖ {last_name} {first_name}, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è!", parse_mode="Markdown",
                         reply_markup=get_successful_enrollment_keyboard())
    await state.clear()


@router.message(F.text.lower() == "/cancel_operation")
async def cancel_save(message: Message, state: FSMContext):
    await state.clear()

    text_result = (
        "‚ùå *–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ!* ‚ùå\n\n"
        "üòî *–®–∫–æ–¥–∞, —â–æ –≤–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏... –ê–ª–µ –≤–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è!* üéØ\n\n"
        "üìå *–©–æ –¥–∞–ª—ñ?*\n"
        "üîπ *–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–µ –∑–∞–Ω—è—Ç—Ç—è* ‚Äì –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üìÖ\n"
        "üîπ *–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é* ‚Äì –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üè†\n\n"
        "‚ú® _–ú–æ–∂–ª–∏–≤–æ, –Ω–∞ –≤–∞—Å —á–µ–∫–∞—î —â–æ—Å—å —â–µ —Ü—ñ–∫–∞–≤—ñ—à–µ!_ üòâ"
    )

    await message.answer(text_result, parse_mode="Markdown", reply_markup=get_cancel_operation_keyboard())


@router.callback_query(F.data == "remove_prev_message")
async def remove_prev_message(callback: CallbackQuery, state: FSMContext):
    """–í–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    await delete_previous_message(callback, state)
