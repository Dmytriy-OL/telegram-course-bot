from aiogram import Bot, types, F, Router
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
from app.database.crud import find_activities_by_date, enroll_student_to_lesson, set_user, lesson_records_display, \
    cancel_record_db
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.keyboards.keyboards import back_button_markup
from app.handlers.commands import cmd_start
from app.handlers.utils import delete_previous_message

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
router = Router()


class Form(StatesGroup):
    waiting_full_name = State()
    waiting_confirmation = State()
    waiting_user_id = State()


def generate_week_keyboard(offset=0):
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥–Ω—è —Ç–∏–∂–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–º—ñ—â–µ–Ω–Ω—è (offset)."""
    keyboard = InlineKeyboardBuilder()
    days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]

    today = datetime.today()
    current_weekday = today.weekday()

    for i in range(7):
        date = today + timedelta(days=(i - current_weekday + offset))
        day_text = f"{days[i]} {date.day}.{date.month}.{date.year}"
        callback_data = f"select_day_{i}_{date.day}_{date.month}_{date.year}"
        keyboard.add(InlineKeyboardButton(text=day_text, callback_data=callback_data))

    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="remove_prev_message"))
    return keyboard.adjust(1).as_markup()


@router.callback_query(F.data.startswith("select_day_"))
async def select_day(callback: CallbackQuery):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–Ω—è—Ç—Ç—è"""
    days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]

    _, _, day_index, day, month, year = callback.data.split("_")
    day_index = int(day_index)
    selected_day = days[day_index]

    lessons = await find_activities_by_date(int(year), int(month), int(day))

    if lessons:
        for lesson in lessons:
            teacher = lesson.administrator
            teacher_fullname = f"{teacher.name} {teacher.surname}" if teacher else "–ù–µ–≤—ñ–¥–æ–º–æ"
            lesson_text = (
                f"üìÖ *–í–∏ –≤–∏–±—Ä–∞–ª–∏:* *{selected_day}, {day}.{month}.{year}*\n\n"
                f"üìñ *{lesson.title}*\n"
                f"üïí *–ß–∞—Å:* {lesson.datetime.strftime('%H:%M')}\n"
                f"üìå *–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è:* {lesson.type_lesson}\n"
                f"üë§ *–í–∏–∫–ª–∞–¥–∞—á:* {teacher_fullname}\n"
                f"üé´ *–î–æ—Å—Ç—É–ø–Ω–æ –º—ñ—Å—Ü—å:* {lesson.places}\n\n"
            )

            # –Ø–∫—â–æ –º—ñ—Å—Ü—è –Ω–µ–º–∞—î
            if not lesson.freely:
                lesson_text += (
                    'üî¥ *–ú—ñ—Å—Ü—è –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ.–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è, '
                    '–ø–æ–∫–∏ —Ö—Ç–æ—Å—å –≤—ñ–¥–º–æ–≤–∏—Ç—å—Å—è –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–¥–∞—Å—Ç—å –º—ñ—Å—Ü–µ.* '
                    'üßê\n_–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!_ üîî'
                )
                await callback.message.answer(lesson_text, parse_mode="Markdown", reply_markup=back_button_markup())
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è",
                                         callback_data=f"recording_day_{lesson.id}_{lesson.places}")
                ], [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="remove_prev_message")
                ]]
            )
            await callback.message.answer(lesson_text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await callback.message.answer("‚ùå *–ó–∞–Ω—è—Ç—å –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –Ω–µ–º–∞—î –∞–±–æ —ó—Ö —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏.*", parse_mode="Markdown",
                                      reply_markup=back_button_markup())


@router.callback_query(F.data.startswith("recording_day_"))
async def select_day(callback: CallbackQuery, state: FSMContext):
    _, _, lesson_id, lesson_users = callback.data.split("_")
    lesson_id = int(lesson_id)
    number_of_students = int(lesson_users)
    if number_of_students >= 1:
        await state.update_data(lesson_id=lesson_id)
        text_example = (
            f"üìù*–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º—è:*\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥:–û–ª—ñ–π–Ω–∏–∫ –î–º–∏—Ç—Ä—ñ–π\n"
        )
        await callback.message.answer(text_example, parse_mode="Markdown")
        await state.set_state(Form.waiting_full_name)
    else:
        await callback.message.answer("–ó–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –Ω–µ–º–∞—î –º—ñ—Å—Ç—å:", callback_data=remove_prev_message)


@router.message(Form.waiting_full_name)
async def process_first_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if " " in full_name:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø—Ä–æ–±—ñ–ª –º—ñ–∂ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º'—è–º
        last_name, first_name = full_name.split(" ", 1)
        text_result = (
            f"üìù <b>–ó–∞–ø–∏—Å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è:</b>\n"
            f"üë§ –£—á–µ–Ω—å: {last_name} {first_name}\n\n"
            f"‚úÖ –Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /OK\n"
            f"üîÑ –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /again\n"
            f"‚ùå –©–æ–± <b>—Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å</b>, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel_operation\n"
        )
        await message.answer(text_result, parse_mode="HTML")

        await state.update_data(first_name=first_name, last_name=last_name, full_name=full_name)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
        await state.set_state(Form.waiting_confirmation)
    else:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.")


@router.message(F.text.lower() == "/cancel_operation")
async def cancel_save(message: Message, state: FSMContext):
    await state.clear()

    text_result = (
        "‚ùå *–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ!* ‚ùå\n\n"
        "üòî *–®–∫–æ–¥–∞, —â–æ –≤–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏... –ê–ª–µ –≤–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è!* üéØ\n\n"
        "üìå *–©–æ –¥–∞–ª—ñ?*\n"
        "üîπ *–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–µ –∑–∞–Ω—è—Ç—Ç—è* ‚Äì –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üìÖ\n"
        "üîπ *–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é* ‚Äì –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üè†\n\n"
        "‚ú® _–ú–æ–∂–ª–∏–≤–æ, –Ω–∞ –≤–∞—Å —á–µ–∫–∞—î —â–æ—Å—å —â–µ —Ü—ñ–∫–∞–≤—ñ—à–µ!_ üòâ"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üìÖ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–µ –∑–∞–Ω—è—Ç—Ç—è", callback_data="enroll_course")
        ], [
            InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="go_to_main_menu")
        ]]
    )

    await message.answer(text_result, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data == "go_to_main_menu")  # !!!!
async def go_to_main_menu(callback: CallbackQuery):
    await callback.message.answer("/start")
    await callback.message.answer("üè† *–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é!*", parse_mode="Markdown")
    await cmd_start(callback.message)


@router.message(F.text.lower() == "/ok")
async def confirm_registration(message: Message, state: FSMContext):
    user_data = await state.get_data()
    first_name = user_data.get("first_name")
    last_name = user_data.get("last_name")
    lesson_id = user_data.get("lesson_id")
    full_name = user_data.get("full_name")

    if not first_name or not last_name:  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –Ω–∞—Ç–∏—Å–Ω–µ –Ω–µ –≤ —Å—Ç–∞–Ω—ñ
        await message.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–∞–ø–∏—Å—É.")
        return
    await set_user(message.from_user.id, message.from_user.username, first_name, last_name)
    await enroll_student_to_lesson(lesson_id, message.from_user.id, full_name)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üìÖ –í–∏–∫–æ–Ω–∞—Ç–∏ —â–µ –æ–¥–∏–Ω –∑–∞–ø–∏—Å", callback_data="enroll_course")
        ], [
            InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="go_to_main_menu")
        ]]
    )

    await message.answer(f"‚úÖ {last_name} {first_name}, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è!", parse_mode="Markdown",
                         reply_markup=keyboard)
    await state.clear()


@router.message(F.text.lower() == "/again")
async def restart_registration(message: Message, state: FSMContext):
    await message.answer("üîÑ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è —â–µ —Ä–∞–∑:")
    await state.set_state(Form.waiting_full_name)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω –Ω–∞–∑–∞–¥


@router.callback_query(F.data == "select_this_week")
async def select_this_week(callback: CallbackQuery):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è."""
    await callback.message.answer("üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=generate_week_keyboard())


@router.callback_query(F.data == "select_next_week")
async def select_next_week(callback: CallbackQuery):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–∂–Ω—è."""
    await callback.message.answer("üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=generate_week_keyboard(offset=7))


@router.callback_query(F.data == "enroll_course")
async def enroll_course(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –∑–∞–ø–∏—Å –¥–æ –∫—É—Ä—Å—É."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å üî•", callback_data="select_this_week")],
        [InlineKeyboardButton(text="üòÉ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å üòÉ", callback_data="select_next_week")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="remove_prev_message")]
    ])
    await callback.message.answer("üìç –û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å:", reply_markup=keyboard)


@router.callback_query(F.data == "my_bookings")
async def my_bookings(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user_tg_id = callback.from_user.id
    records = await lesson_records_display(user_tg_id)
    if not records:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.")
        return

    for record in records:
        lesson = record.lesson
        user = record.user
        text_result = (
            "üéì *–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è:*\n\n"
            f"üìå *–ö—É—Ä—Å:* {lesson.title}\n"
            f"üë®‚Äçüè´ *–í–∏–∫–ª–∞–¥–∞—á:* {lesson.instructor}\n"
            f"üìÖ *–î–∞—Ç–∞ —Ç–∞ —á–∞—Å:* {lesson.datetime.strftime('%Y-%m-%d %H:%M')}\n\n"
            f"üßë‚Äçüéì *–°—Ç—É–¥–µ–Ω—Ç:* {user.name or '–ù–µ–≤—ñ–¥–æ–º–æ'} {user.surname or '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
            "--------------------------------------\n"
            "üîî *–Ø–∫—â–æ –Ω–µ –∑–º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–∞—Å—É–π—Ç–µ –∑–∞–ø–∏—Å.*\n"
            "‚ùå –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å.\n"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data=f"cancel_confirmed_{record.id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="remove_prev_message")]])
        await callback.message.answer(text_result, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data.startswith("cancel_confirmed_"))
async def ask_cancel_confirmation(callback: CallbackQuery, state: FSMContext):
    record_id = callback.data.split("_")[-1]
    await state.update_data(record_id=record_id)
    text_result = (
        "*–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å*\n\n"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢–∞–∫", callback_data=f"cancel_lesson")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="remove_prev_message")]])
    await callback.message.answer(text_result, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data == "cancel_lesson")
async def cancel_record(callback: CallbackQuery, state: FSMContext):
    record = await state.get_data()
    record_id = record.get("record_id")
    record = await cancel_record_db(int(record_id))
    if record:
        lesson = record.lesson
        text_result = (
            "‚ùå *–í–∞—à–∏–π –∑–∞–ø–∏—Å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ:‚ùå*\n\n"
            f"üìå *–ö—É—Ä—Å:* {lesson.title}\n"
            f"üìÖ *–î–∞—Ç–∞ —Ç–∞ —á–∞—Å:* {lesson.datetime.strftime('%Y-%m-%d %H:%M')}\n\n"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=f"go_to_main_menu")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]])
        await callback.message.answer(text_result, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await callback.answer("–¶–µ–π –∑–∞–ø–∏—Å –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π‚ùå")
    await state.clear()


@router.callback_query(F.data == "remove_prev_message")
async def remove_prev_message(callback: CallbackQuery, state: FSMContext):
    """–í–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    await delete_previous_message(callback, state)
