from datetime import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, \
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.filters import StateFilter

from aiogram_calendar import SimpleCalendarCallback

from app.database.admin_crud import get_enrollments_for_two_weeks, active_courses_for_two_weeks
from app.database.crud import create_lesson
from app.database.models import LessonType
from app.handlers.utils import open_calendar, calendar
from app.keyboards.keyboards import back_button_builder, get_teachers_command

router = Router()


class LessonFactory(StatesGroup):
    waiting_for_title = State()
    waiting_for_date = State()
    waiting_for_manual_date = State()
    waiting_for_time = State()
    waiting_for_type = State()
    waiting_for_places = State()


@router.callback_query(F.data == "teachers")
async def teachers(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üÜï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è", callback_data="add_lesson")],
            [InlineKeyboardButton(text="üì• –ó–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å–∏", callback_data="course_signups")],
            [InlineKeyboardButton(text="üìö –ê–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏", callback_data="active_courses")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è", callback_data="edit_lessons")],
            [InlineKeyboardButton(text="üîó –î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è", callback_data="lesson_link")],
            [InlineKeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥", callback_data="teacher_menu")]
        ]
    )
    await callback.message.answer(
        "üë©‚Äçüè´ *–ú–µ–Ω—é –≤–∏–∫–ª–∞–¥–∞—á–∞*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é, —è–∫—É –±–∞–∂–∞—î—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ üëá",
        parse_mode="Markdown",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "add_lesson")
async def add_lesson(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—Ç—è —Ç–∞ –∑–∞–ø–∏—Ç—É—î —Ç–µ–º—É –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó."""
    await callback.message.answer(
        "üìù *–í–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É –∑–∞–Ω—è—Ç—Ç—è:*\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.",
        parse_mode="Markdown"
    )
    await state.set_state(LessonFactory.waiting_for_title)


@router.message(LessonFactory.waiting_for_title)
async def get_lesson_title(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–∑–≤—É –∑–∞–Ω—è—Ç—Ç—è —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –≤–∏–±—ñ—Ä (–∫–∞–ª–µ–Ω–¥–∞—Ä –∞–±–æ —Ä—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è)."""
    await state.update_data(title=message.text.strip())
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É", callback_data="manual_date")],
            [InlineKeyboardButton(text="–í–∏–±—Ä–∞—Ç–∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä", callback_data="open_calendar")]
        ]
    )
    await message.answer(
        "üìÖ *–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞–Ω—è—Ç—Ç—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è:*\n"
        "‚úçÔ∏è *–ê–±–æ –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:* `–†–†–†–†.–ú–ú.–î–î`\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await state.set_state(LessonFactory.waiting_for_date)


@router.callback_query(SimpleCalendarCallback.filter(), LessonFactory.waiting_for_date)
async def process_date_selection(callback: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –¥–∞—Ç–∏ —á–µ—Ä–µ–∑ inline-–∫–∞–ª–µ–Ω–¥–∞—Ä —ñ –∑–∞–ø–∏—Ç—É—î —á–∞—Å –∑–∞–Ω—è—Ç—Ç—è."""
    selected, date = await calendar.process_selection(callback, callback_data)
    if selected:
        await state.update_data(date=date)
        await callback.message.edit_text(
            f"‚úÖ –î–∞—Ç—É –æ–±—Ä–∞–Ω–æ: {date.strftime('%d.%m.%Y')}\n"
            f"üïí –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å –∑–∞–Ω—è—Ç—Ç—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 18:00):\n"
            "–î–ª—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel."
        )
        await state.set_state(LessonFactory.waiting_for_time)


@router.callback_query(F.data == "manual_date", LessonFactory.waiting_for_date)
async def prompt_manual_date(callback: CallbackQuery, state: FSMContext):
    """–Ü–Ω—Ñ–æ—Ä–º—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è."""
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: `–†–†–†–†.–ú–ú.–î–î`\n"
        "_–ù–∞–ø—Ä–∏–∫–ª–∞–¥:_ `2025.06.12`",
        parse_mode="Markdown"
    )
    await state.set_state(LessonFactory.waiting_for_manual_date)


@router.message(LessonFactory.waiting_for_manual_date)
async def handle_manual_date(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î —Ä—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†.–ú–ú.–î–î —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –∫–∞–ª–µ–Ω–¥–∞—Ä –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —Ñ–æ—Ä–º–∞—Ç—É."""
    try:
        date = datetime.strptime(message.text.strip(), "%Y.%m.%d")
        await state.update_data(date=date)
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ –æ–±—Ä–∞–Ω–∞: {date.strftime('%d.%m.%Y')}\n"
            f"üïí –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å –∑–∞–Ω—è—Ç—Ç—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 18:00)\n"
            "‚ùå –î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel."
        )
        await state.set_state(LessonFactory.waiting_for_time)
    except ValueError:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–°–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º", callback_data="open_calendar")]
            ]
        )
        await message.answer(
            "‚ö† –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: `2025.06.12`\n"
            "–ê–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —ñ–Ω–ª–∞–π–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
            parse_mode="Markdown",
            reply_markup=keyboard
        )


@router.message(LessonFactory.waiting_for_time)
async def get_lesson_time(message: Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—Ç—è —Ç–∞ –∑–∞–ø–∏—Ç—É—î —á–∞—Å –∑–∞–Ω—è—Ç—Ç—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó."""
    try:
        hour, minute = map(int, message.text.split(":"))
        await state.update_data(hour=hour, minute=minute)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üñ• –û–Ω–ª–∞–π–Ω"), KeyboardButton(text="üè´ –û—Ñ–ª–∞–π–Ω")]
            ],
            resize_keyboard=True,
        )
        await message.answer(
            "üìå *–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–Ω—è—Ç—Ç—è:*\n"
            "–î–ª—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await state.set_state(LessonFactory.waiting_for_type)
    except ValueError:
        await message.answer("‚ö† –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")


@router.message(LessonFactory.waiting_for_type)
async def get_lesson_type(message: Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—Ç—è Enam:–∑ –≤–∏–±–æ—Ä–æ–º —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç—Ç—è —Ç–∞ –∑–∞–ø–∏—Ç –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó."""
    type_text = message.text.strip().lower()
    if "–æ–Ω–ª–∞–π–Ω" in type_text:
        lesson_type = LessonType.ONLINE
    elif "–æ—Ñ–ª–∞–π–Ω" in type_text:
        lesson_type = LessonType.OFFLINE
    else:
        await message.answer("‚ö† –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –í–∏–±–µ—Ä—ñ—Ç—å 'üñ• –û–Ω–ª–∞–π–Ω' –∞–±–æ 'üè´ –û—Ñ–ª–∞–π–Ω'.", )
        return

    await state.update_data(type_lesson=lesson_type)
    await message.answer(
        "üë•  *–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å:*\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove())

    await state.set_state(LessonFactory.waiting_for_places)


@router.message(LessonFactory.waiting_for_places)
async def get_lesson_places(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ—Å—Ü—å –¥–ª—è –∑–∞–Ω—è—Ç—Ç—è —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –ø—ñ–¥—Å—É–º–æ–∫ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è,
     –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."""
    try:
        places = int(message.text.strip())
        await state.update_data(places=places)

        lesson_data = await state.get_data()
        date = lesson_data.get('date')

        text_result = (
            f"–ù–∞–∑–≤–∞ –∑–∞–Ω—è—Ç—Ç—è:{lesson_data['title']}\n"
            f"–î–∞—Ç–∞: {date.day:02d}.{date.month:02d}.{date.year}\n"
            f"–ß–∞—Å: {lesson_data.get('hour', 0):02d}:{lesson_data.get('minute', 0):02d}\n"
            f"–¢–∏–ø: {'–æ–Ω–ª–∞–π–Ω' if lesson_data.get('type_lesson') == LessonType.ONLINE else '–æ—Ñ–ª–∞–π–Ω'}\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å: {lesson_data.get('places', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ", callback_data="confirm_lesson")
            ], [
                InlineKeyboardButton(text="üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–Ω–æ–≤—É", callback_data="retry_lesson")
            ], [
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_lesson")
            ]]
        )
        await message.answer(text_result, reply_markup=keyboard)
    except ValueError:
        await message.answer("‚ö† –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")


@router.callback_query(F.data == "confirm_lesson")
async def confirm_lesson(callback: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞–Ω–æ—Å–∏—Ç—å –∑–∞–Ω—è—Ç—Ç—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—é—î –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è."""
    lesson_data = await state.get_data()
    date = lesson_data.get('date')
    await callback.message.delete()

    await create_lesson(
        title=lesson_data["title"],
        year=date.year,
        month=date.month,
        day=date.day,
        hour=lesson_data["hour"],
        minute=lesson_data["minute"],
        type_lesson=lesson_data["type_lesson"],
        teacher_id_tg=callback.from_user.id,
        places=lesson_data["places"]
    )
    await state.clear()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∞–Ω–µ–ª—ñ –≤—á–∏—Ç–µ–ª—è", callback_data="teacher_menu")]
        ]
    )
    await callback.message.answer("‚úÖ –ó–∞–Ω—è—Ç—Ç—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ!", reply_markup=keyboard)


@router.callback_query(F.data == "open_calendar",
                       StateFilter(LessonFactory.waiting_for_manual_date, LessonFactory.waiting_for_date))
async def open_calendar_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —ñ–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è."""
    keyboard = await open_calendar()
    await callback.message.edit_text(
        "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä üëá",
        reply_markup=keyboard
    )
    await state.set_state(LessonFactory.waiting_for_date)


@router.callback_query(F.data == "course_signups")  # !!!
async def course_signups(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≥–ª—è–¥–∞—î–º–æ –∑–∞–ø–∏—Å–∏ —É—á–Ω—ñ–≤ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è"""
    enrollments = await get_enrollments_for_two_weeks()
    if not enrollments:
        await callback.message.answer("‚ùå –ó–∞–ø–∏—Å—ñ–≤ —É—á–Ω—ñ–≤ –∑–∞ —Ü–µ–π —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    text_result = ""
    for i, enrollment in enumerate(enrollments, start=1):
        lesson = enrollment.lesson
        user = enrollment.user
        lesson_type = "üßë‚Äçüè´ *–û—á–Ω–æ*" if lesson.type_lesson == LessonType.OFFLINE else "üíª *–û–Ω–ª–∞–π–Ω*"
        text_result += (
            f"*–£—á–µ–Ω—å #{i}*\n"
            f"*–ù–∞–∑–≤–∞ –∑–∞–Ω—è—Ç—Ç—è:* `{lesson.title}`\n"
            f"*–¢–µ–ª–µ–≥—Ä–∞–º:* `{user.login}`\n"
            f"*–Ü–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:* `{user.name or '–ù–µ–≤—ñ–¥–æ–º–æ'} {user.surname or ''}`\n"
            f"*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å:* `{lesson.datetime.strftime('%d.%m.%Y %H:%M')}`\n"
            f"*–§–æ—Ä–º–∞—Ç:* {lesson_type}\n"
            f"*–í–∏–∫–ª–∞–¥–∞—á:* `{lesson.instructor}`\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )

    await callback.message.answer(text="üìã *–ó–∞–ø–∏—Å–∏ —É—á–Ω—ñ–≤ –Ω–∞ —Ü–µ–π —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:*\n\n" + text_result,
                                  parse_mode="Markdown",
                                  reply_markup=back_button_builder().as_markup())


@router.callback_query(F.data == "active_courses")
async def course_signups(callback: CallbackQuery, state: FSMContext):
    lessons = await active_courses_for_two_weeks()
    if not lessons:
        await callback.message.answer("‚ùå –ö—É—Ä—Å—ñ–≤ –Ω–∞ —Ü–µ–π —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    text_result = ""
    for i, lesson in enumerate(lessons, start=1):
        lesson_type = "üßë‚Äçüè´ *–û—á–Ω–æ*" if lesson.type_lesson == LessonType.OFFLINE else "üíª *–û–Ω–ª–∞–π–Ω*"
        lesson_places = f"{lesson.places} üü¶" if lesson.places >= 1 else "‚úÖ –ì—Ä—É–ø–∞ –ø–æ–≤–Ω–∞ "
        text_result += (
            f"*–ó–∞–Ω—è—Ç—Ç—è #{i}*\n"
            f"*–ù–∞–∑–≤–∞ –∑–∞–Ω—è—Ç—Ç—è:* `{lesson.title}`\n"
            f"*–í–∏–∫–ª–∞–¥–∞—á:* `{lesson.instructor}`\n"
            f"*–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å:* `{lesson_places}`\n"
            f"*–î–∞—Ç–∞ —Ç–∞ —á–∞—Å:* `{lesson.datetime.strftime('%d.%m.%Y %H:%M')}`\n"
            f"*–§–æ—Ä–º–∞—Ç:* {lesson_type}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )

    await callback.message.answer(text="üìã *–ê–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏ –Ω–∞ —Ü–µ–π —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:*\n\n" + text_result,
                                  parse_mode="Markdown",
                                  reply_markup=back_button_builder().as_markup())


@router.callback_query(F.data == "teacher_menu")
async def admin_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        text="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_teachers_command()
    )
