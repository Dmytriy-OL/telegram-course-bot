from aiogram import F, Router
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.database.crud import lesson_records_display, cancel_record_db

router = Router()


@router.callback_query(F.data == "my_bookings")
async def my_bookings(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user_tg_id = callback.from_user.id
    records = await lesson_records_display(user_tg_id)
    if not records:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.")
        return

    for record in records:
        lesson = record.lesson
        teacher = lesson.administrator
        full_name = record.full_name
        text_result = (
            "üéì *–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è:*\n\n"
            f"üìå *–ö—É—Ä—Å:* {lesson.title}\n"
            f"üë®‚Äçüè´ *–í–∏–∫–ª–∞–¥–∞—á:* {teacher.name} {teacher.surname}\n"
            f"üìÖ *–î–∞—Ç–∞ —Ç–∞ —á–∞—Å:* {lesson.datetime.strftime('%Y-%m-%d %H:%M')}\n\n"
            f"üßë‚Äçüéì *–°—Ç—É–¥–µ–Ω—Ç:* {full_name or '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
            "--------------------------------------\n"
            "üîî *–Ø–∫—â–æ –Ω–µ –∑–º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–∞—Å—É–π—Ç–µ –∑–∞–ø–∏—Å.*\n"
            "‚ùå –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å.\n"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data=f"cancel_confirmed_{record.id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="remove_prev_message")]])
        await callback.message.answer(text_result, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data.startswith("cancel_confirmed_"))
async def ask_cancel_confirmation(callback: CallbackQuery, state: FSMContext):
    record_id = callback.data.split("_")[-1]
    await state.update_data(record_id=record_id)
    text_result = (
        "*–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å*\n\n"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢–∞–∫", callback_data=f"cancel_lesson")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="remove_prev_message")]])
    await callback.message.answer(text_result, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data == "cancel_lesson")
async def cancel_record(callback: CallbackQuery, state: FSMContext):
    record = await state.get_data()
    record_id = record.get("record_id")
    record = await cancel_record_db(int(record_id))
    if record:
        lesson = record.lesson
        text_result = (
            "‚ùå *–í–∞—à–∏–π –∑–∞–ø–∏—Å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ:‚ùå*\n\n"
            f"üìå *–ö—É—Ä—Å:* {lesson.title}\n"
            f"üìÖ *–î–∞—Ç–∞ —Ç–∞ —á–∞—Å:* {lesson.datetime.strftime('%Y-%m-%d %H:%M')}\n\n"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=f"go_to_main_menu")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]])
        await callback.message.answer(text_result, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await callback.answer("–¶–µ–π –∑–∞–ø–∏—Å –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π‚ùå")
    await state.clear()
